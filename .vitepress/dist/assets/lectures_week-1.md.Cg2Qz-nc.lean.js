import{_ as o,c as t,a2 as a,o as n}from"./chunks/framework.DPuwY6B9.js";const p=JSON.parse('{"title":"Introduction to Software, GitHub and Markdown","description":"","frontmatter":{"outline":2},"headers":[],"relativePath":"lectures/week-1.md","filePath":"lectures/week-1.md"}'),r={name:"lectures/week-1.md"};function i(s,e,h,l,c,d){return n(),t("div",null,e[0]||(e[0]=[a('<h1 id="introduction-to-software-github-and-markdown" tabindex="-1">Introduction to Software, GitHub and Markdown <a class="header-anchor" href="#introduction-to-software-github-and-markdown" aria-label="Permalink to &quot;Introduction to Software, GitHub and Markdown&quot;">​</a></h1><p><strong>Resources:</strong></p><ul><li><a href="https://www.markdownguide.org/basic-syntax/" target="_blank" rel="noreferrer">Basics of Markdown</a></li><li><a href="https://www.markdownguide.org/extended-syntax/" target="_blank" rel="noreferrer">More advanced stuff on Markdown</a></li><li><a href="https://www.w3schools.com/git/git_intro.asp?remote=github" target="_blank" rel="noreferrer">Git &amp; Github basic</a></li><li><a href="https://www.youtube.com/watch?v=RGOj5yH7evk" target="_blank" rel="noreferrer">Git &amp; Github Basics, Youtube video (ca 1h)</a></li></ul><p>Use, these resources if you like! they won&#39;t contain a lot of new information. Instead, more in-depth about topics given below.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>An important aspect of science is reporducibility. Since this course is about analysing data, it is crucial that the analysis is reproducibile. How else will you know if my analysis is correct or truthful?</p><p>The idea is to use simple tools that take us from raw data to a finished report simply. In a manner that easy to follow along. We will introduce tools below that simplify this process greatly and they will be used throughout the course, including the homework, project and exam.</p><p>Specifically, the tools we will use are <code>Python</code>/<code>R</code> for programming, <code>Jupyter notebook</code> for analysing text and <code>Git</code> together with <code>Github</code> for version control. In combination these are powerful tools that make science accessible to others as well as reproducible.</p><h2 id="preperation" tabindex="-1">Preperation <a class="header-anchor" href="#preperation" aria-label="Permalink to &quot;Preperation&quot;">​</a></h2><p>Before we go into details about the tools we will use, some administrative things need to be done.</p><p>Register your github username on the <a href="https://kurser.math.su.se/course/view.php?id=1333" target="_blank" rel="noreferrer">moodle course page</a>. If you havent created a github account make sure to do that and register on the moodle page as soon as possible. This is how we will grade your homework and project.</p><p>Now lets go through the tools and how we can go about installing them one by one.</p><h2 id="git-and-github" tabindex="-1">Git and Github <a class="header-anchor" href="#git-and-github" aria-label="Permalink to &quot;Git and Github&quot;">​</a></h2><h3 id="what-is-git-and-github" tabindex="-1">What is Git and Github ? <a class="header-anchor" href="#what-is-git-and-github" aria-label="Permalink to &quot;What is Git and Github ?&quot;">​</a></h3><p>Git is a tool used for version control of software projects, it is also very common to use Git for easier collaborations in teams for larger projects. You can find more information about Git <a href="https://en.wikipedia.org/wiki/Git" target="_blank" rel="noreferrer">here</a>.</p><p>Github is a cloud-based Git repository. However, it is used for much more than just version control. Github is a space for developers to share and collaborate on projects, especially for projects that are a part of the open source community. It is also space to showcase ones technical ability to employers. Many developers also use Github as a part of their resume.</p><p>You can also find various open source projects that that are free to use. Be careful when you use these projects and always make sure that you give proper credit to the original creator. Being affluent with Github can and will save you a lot of time.</p><p>We can go on and on about Git but you wont understand it until you use it! So we will focus on using Git with Github in this course and hopefully you will be convinced!</p><h3 id="how-to-install-git-and-github-desktop" tabindex="-1">How to install Git and Github Desktop <a class="header-anchor" href="#how-to-install-git-and-github-desktop" aria-label="Permalink to &quot;How to install Git and Github Desktop&quot;">​</a></h3><p>By installing Github Desktop you get a Graphical User Interface(GUI) for Git which automatically connects to your Github account. You can install Github desktop by Going to <a href="https://desktop.github.com/" target="_blank" rel="noreferrer">this link</a>. Follow the simple intructions provided! Once you have downloaded and installed Github desktop, open it up and log into your Github account. Now you should have Git and Github desktop installed.</p><h2 id="anaconda-and-jupyter" tabindex="-1">Anaconda and Jupyter <a class="header-anchor" href="#anaconda-and-jupyter" aria-label="Permalink to &quot;Anaconda and Jupyter&quot;">​</a></h2><p>Anaconda is one of the most popular platforms for scientific computing. In full, it is a bundle of various software used in data science, packaged together. Jupyter is one of theses programs inlcuded and it is a popular choice for data scientist used for developing and presenting data anaylsis. You will use these tools to do the homework.</p><h3 id="how-to-install-anaconda-and-jupyter-lab" tabindex="-1">How to install Anaconda and Jupyter Lab <a class="header-anchor" href="#how-to-install-anaconda-and-jupyter-lab" aria-label="Permalink to &quot;How to install Anaconda and Jupyter Lab&quot;">​</a></h3><p>We are going to install miniconda, which is, just as it is called, a mini version of Anaconda. To install miniconda, go to the following <a href="https://docs.conda.io/projects/miniconda/en/latest/" target="_blank" rel="noreferrer">link</a>. Scroll down and choose the operating system that you have on your computer and follow the installation instructions.</p><p>Once you are done with installing Anaconda(miniconda) we can go ahead and set up our anaconda environment. To do this you need to work with the command line interface (CLI) also known as the terminal, which might seem daunting at first but it is very easy to work with.</p><p>The commands inserted into the CLI differs based on the programming language you choose to use.</p><p>Choose the programming language that your are going to use and copy the appropriate command below and run it in your terminal.</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-bh9kH" id="tab-ET3yobI" checked><label data-title="Python" for="tab-ET3yobI">Python</label><input type="radio" name="group-bh9kH" id="tab-w0f8LqK"><label data-title="R" for="tab-w0f8LqK">R</label></div><div class="blocks"><div class="language- vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>conda config --add channels conda-forge &amp;&amp; conda create --name py_env pandas numpy matplotlib jupyterlab -y</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>conda config --add channels conda-forge &amp;&amp; conda create --name renv r-essentials r-base=4.1.3 -y</span></span></code></pre></div></div></div><p>Anconda works in something called virtual environments which are isolated instances of your coding setup. You can have multiple enviroment containing for instance different packages and versions.</p><p>You have now created an enviroment with the specific packages that is needed for this course. Typically, one uses enviroments for different projects so that your programming instance do not get bloated with unecessary libraries.</p><p>After you have installed the necessary environment we can go ahead and open jupyter lab by first activating the enviroment we have create using the command</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>conda activate ENV_NAME</span></span></code></pre></div><p>where <code>ENV_NAME</code> is <code>py_env</code> and <code>r_env</code> for python users and r users respectively.</p><p>Finally, run the command</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>jupyter lab</span></span></code></pre></div><p>This should open up jupyter lab.</p><h3 id="jupyter-notebooks" tabindex="-1">Jupyter Notebooks <a class="header-anchor" href="#jupyter-notebooks" aria-label="Permalink to &quot;Jupyter Notebooks&quot;">​</a></h3><p>Jupyter notebooks provide a single document for running code, visaualizing data and writing in <code>Markdown</code>. We will use Markdown in our notebooks to write, it is very simple to use! You can read more on Markdown in the resources provided above.</p><h2 id="more-on-git" tabindex="-1">More on Git <a class="header-anchor" href="#more-on-git" aria-label="Permalink to &quot;More on Git&quot;">​</a></h2><h3 id="resources" tabindex="-1">Resources <a class="header-anchor" href="#resources" aria-label="Permalink to &quot;Resources&quot;">​</a></h3><ul><li><a href="https://docs.github.com/en/get-started/quickstart/github-flow" target="_blank" rel="noreferrer">Branching &amp; Merging</a></li><li><a href="https://git-scm.com/docs/gitignore" target="_blank" rel="noreferrer">.gitignore</a></li><li><a href="https://docs.github.com/en/get-started/quickstart/fork-a-repo" target="_blank" rel="noreferrer">Forking</a></li></ul><p>There are a few more concepts in Git that are important to understand. These are the following.</p><h3 id="gitignore" tabindex="-1">.gitignore <a class="header-anchor" href="#gitignore" aria-label="Permalink to &quot;.gitignore&quot;">​</a></h3><p>As you might have already seen, when working on project, there are a lot of unnecessary files that enter the project. For instance, if you use jupyter notebooks, a file named <code>.ipynb_checkpoints</code> will be generated automatically. In most cases, tracking these types of files and/or folders with Git is not needed. To ignore these particular files and/or folders we can use <code>.gitignore</code>. The <code>.gitignore</code> file is an index for all the files and folders you do not wish to track.</p><p>A simple example of a <code>.gitignore</code> file, in our example, would be</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.ipynb_checkpoints</span></span></code></pre></div><p>Sometimes, it is typical to also ignore the <code>.gitignore</code> file. It depends on the project. You can ignore as many file and folders you deem to be unnecessary to track.</p><p>You can create this file manually, or using Github desktop. Using Github desktop, in the menu bar, go to <code>Repository&gt; Repository Settings &gt; Ignored Files</code> and list the files and folders you wish to ignore there. If you create the file manually, make sure to place the <code>.gitignore</code> file in the root of you repository.</p><p>You can also right click the file or folder on your Github desktop app, and select ignore file.</p><h3 id="forking-vs-cloning" tabindex="-1">Forking vs Cloning <a class="header-anchor" href="#forking-vs-cloning" aria-label="Permalink to &quot;Forking vs Cloning&quot;">​</a></h3><p>Forking, is a concept that is central to Git. It is the action done on a Git repository, which creates a copy of a repo and detaches from the original repo. In contrast, when you clone a repository, you make a copy, but the copy is still linked to the original repo.</p><h4 id="when-should-i-fork-a-repository" tabindex="-1">When should I fork a repository? <a class="header-anchor" href="#when-should-i-fork-a-repository" aria-label="Permalink to &quot;When should I fork a repository?&quot;">​</a></h4><p>When you want to make changes to a project that you do not have ownership of, or, if you want to make your own version of the project and build from the original project, you can fork the repository and work on your own continued version. Be mindfull of the rights you have to the code. If the project is open-sourc, there is no issue with forking the code. However, if this is not the case, it is theft of intellectual property.</p><p>There are many popular projects that are forks. A popular example is Mac OS, which is a fork of Free-BSD. Mac OS started as a fork of Free-BSD and has now developed into its own thing.</p><h4 id="when-should-i-clone-a-repository" tabindex="-1">When should i clone a repository? <a class="header-anchor" href="#when-should-i-clone-a-repository" aria-label="Permalink to &quot;When should i clone a repository?&quot;">​</a></h4><p>When you want to make changes to a repository that you have ownership of and you want the changes to be reflected in the original repository, then you can clone the repository. For instance, if a new member joins a project, the new member can clone the project to get a hold of the code.</p><p>Although, forking and cloning seem similar, there are small but important subtleties between them.</p><p>Forking is also very popular when making contributions to open-source projects. Read more about forking <a href="https://docs.github.com/en/get-started/quickstart/fork-a-repo" target="_blank" rel="noreferrer">here</a>.</p><h3 id="branches" tabindex="-1">Branches <a class="header-anchor" href="#branches" aria-label="Permalink to &quot;Branches&quot;">​</a></h3><p>Branches are one the most important part of Git. During development, you will most likely encouter a situation where you would like to test a new feature in your code without changing the original code. Imagine you would like to change the theme of your website. Since you are in development stages, you don&#39;t want to ruin the original working code in case you decide the feature dosen&#39;t work as intended. A simple solution would be to make a copy of the code and develop your new feature on the copied code. Git, defines this procedure as branching. The idea is that you &quot;branch&quot; of from your main code to develop the feature. If you decide that the feature was a bad idea, you can just delete the branch and jump to your main branch without changes being made to your main code. On the other hand, if you decide that the features is good, you can <code>merge</code> the new feature to you main branch. Introducing the branching feature makes it seemless to work on new features conccurently and also makes collaboration easy. Each team or member can work on a feature independently.</p><p>The following illustration will make this more clear.</p><p><img src="https://the-turing-way.netlify.app/_images/sub-branch.png" alt="git-branching"> image from: <a href="https://the-turing-way.netlify.app/reproducible-research/vcs/vcs-git-branches.html" target="_blank" rel="noreferrer">the turing way</a>.</p><p>This image illustrates how the process of branching may look in a project. As you can see, two features can be developed concurrently without conflicts. This makes developing features easier as you are not restricted to a single feature at a time.</p><p>You may have noticed that you are working on the <code>main</code> branch of your repository. This is the default. You can simply create a new branch whenever you feel like you want to add a feature to your code and don&#39;t want to ruin the original code. This is usually not an issue for very small projects. However, as your project grows, branching becomes very important.</p><h4 id="how-to-create-a-git-branch" tabindex="-1">How to create a Git branch <a class="header-anchor" href="#how-to-create-a-git-branch" aria-label="Permalink to &quot;How to create a Git branch&quot;">​</a></h4><p>It is simple to create, merge or delete a branch. On Github Desktop, press on the <code>Current Branch</code> tab and select <code>new branch</code>. Name it something that makes sense to the feature you are going to add. Finally, choose the branch you want base the new branch on, that is, the instance of your code that you want to branch of from. Note that this only creates a local branch and you need to <code>Publish</code> the new branch if you want it to be seen on Github.</p><h4 id="how-to-merge-delete-a-branch" tabindex="-1">How to merge/delete a branch <a class="header-anchor" href="#how-to-merge-delete-a-branch" aria-label="Permalink to &quot;How to merge/delete a branch&quot;">​</a></h4><p>On Github desktop, under the <code>Current branch</code> tab you will see all the branches of your (local) repository. To delete a branch, simply right click on the branch and select <code>delete</code>. To merge a branch, under the <code>Current branch</code> drop down, there is a tab called <code>Pull Requests</code>, open this tab and in the bottom press the button, <code>Chosse a branch to merge into ...</code>. Finally, chose the branch you want to merge and press <code>Create merge commit</code>. Making a pull requests is synonomous to creating a request for merging.</p><p>If your feature branch is published on Github, you can merge on there as well. Read more about how to do that <a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request" target="_blank" rel="noreferrer">here</a>.</p><h2 id="tieing-it-together" tabindex="-1">Tieing it together <a class="header-anchor" href="#tieing-it-together" aria-label="Permalink to &quot;Tieing it together&quot;">​</a></h2><p>Now that you have everything installed and hopefully have a basic understanding of these tools its time to create your first notebook and push it up to your Github repository. This is part of the homework for this week. Check out <a href="/homework/1.html">homework 1</a>.</p>',71)]))}const g=o(r,[["render",i]]);export{p as __pageData,g as default};
