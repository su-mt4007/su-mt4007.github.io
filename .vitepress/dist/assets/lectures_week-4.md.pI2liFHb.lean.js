import{_ as e,c as s,a2 as i,o as t}from"./chunks/framework.DPuwY6B9.js";const k=JSON.parse('{"title":"Lecture 6 Joining Data, SQL and Introduction to RegEx","description":"","frontmatter":{},"headers":[],"relativePath":"lectures/week-4.md","filePath":"lectures/week-4.md"}'),n={name:"lectures/week-4.md"};function l(o,a,r,h,p,c){return t(),s("div",null,a[0]||(a[0]=[i(`<h1 id="lecture-6-joining-data-sql-and-introduction-to-regex" tabindex="-1">Lecture 6 Joining Data, SQL and Introduction to RegEx <a class="header-anchor" href="#lecture-6-joining-data-sql-and-introduction-to-regex" aria-label="Permalink to &quot;Lecture 6 Joining Data, SQL and Introduction to RegEx&quot;">​</a></h1><h3 id="resources" tabindex="-1">Resources <a class="header-anchor" href="#resources" aria-label="Permalink to &quot;Resources&quot;">​</a></h3><h4 id="joining-data" tabindex="-1">Joining Data <a class="header-anchor" href="#joining-data" aria-label="Permalink to &quot;Joining Data&quot;">​</a></h4><ul><li><a href="https://wesmckinney.com/book/" target="_blank" rel="noreferrer">P4DA</a>: 8.2-8.3</li><li><a href="https://r4ds.hadley.nz/" target="_blank" rel="noreferrer">R4DS</a>: 19.1-19.4</li></ul><h4 id="sql" tabindex="-1">SQL <a class="header-anchor" href="#sql" aria-label="Permalink to &quot;SQL&quot;">​</a></h4><ul><li><a href="https://www.w3schools.com/sql/sql_syntax.asp" target="_blank" rel="noreferrer">W3, SQL Basics</a></li><li><a href="https://r4ds.hadley.nz/" target="_blank" rel="noreferrer">R4DS</a> chapter 19</li><li>SQLite <a href="https://docs.python.org/3/library/sqlite3.html#tutorial" target="_blank" rel="noreferrer">Python</a>, <a href="https://solutions.posit.co/connections/db/getting-started/database-queries/" target="_blank" rel="noreferrer">R</a></li></ul><h4 id="regex" tabindex="-1">RegEx <a class="header-anchor" href="#regex" aria-label="Permalink to &quot;RegEx&quot;">​</a></h4><ul><li><a href="https://r4ds.hadley.nz/strings" target="_blank" rel="noreferrer">R4DS</a> chapter 14</li><li><a href="https://wesmckinney.com/book/data-cleaning.html#text_string_manip" target="_blank" rel="noreferrer">P4DA</a> chapter 7.4</li><li><a href="https://www.rexegg.com/regex-quickstart.html" target="_blank" rel="noreferrer">RegEx Cheat Sheet</a></li></ul><p><em>You can find examples and motivation in the resources.</em></p><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h2><p>In this lecture, we explore key topics in data manipulation and querying. First, we discuss the concept of joins, which allow us to combine different sources of data into a single dataframe. This is a crucial skill for data scientists, as data is often scattered across multiple sources such as databases, the internet, and experimental datasets. Joining enables us to consolidate these scattered datasets into one.</p><p>Next, we cover the basics of SQL, focusing on the fundamental syntax for making queries. This includes both retrieving and storing data in a database, laying the foundation for effective database management.</p><p>Finally, we delve into the use of RegEx for pattern matching in strings. RegEx is a powerful tool for bulk searching patterns and is an industry standard. It can be applied across various tools we frequently use, such as Git, Python/R, and SQL, making it an essential skill for efficient data processing.</p><h2 id="joins" tabindex="-1">Joins <a class="header-anchor" href="#joins" aria-label="Permalink to &quot;Joins&quot;">​</a></h2><p>Joining tables is the process of combining data from multiple tables into a single table. This operation is fundamental in data analysis and database management, as it allows us to consolidate scattered datasets. There are several types of joins, each with unique implications for the structure and size of the resulting table. The four most common types are <code>left join</code>, <code>right join</code>, <code>inner join</code>, and <code>outer join</code>. Each serves a specific purpose, depending on how we want to merge the tables.</p><p>The following image visually illustrates these operations:</p><p><img src="https://www.alphacodingskills.com/sql/img/sql-join.PNG" alt="join-venn"></p><p><em>Image from: <a href="https://www.alphacodingskills.com/sql/img/sql-join.PNG" target="_blank" rel="noreferrer">https://www.alphacodingskills.com/sql/img/sql-join.PNG</a></em></p><p>In this context, we are always referring to combining two tables at a time. When working with more than two tables, we can achieve the desired result by combining them iteratively, two tables at a time.</p><p>A common approach is to iteratively expand a dataset by incorporating additional datasets through left join, which is widely used due to its practicality. However, the other types of joins— <code>right join</code>, <code>inner join</code>, and <code>outer join</code>—are equally important for creating more intricate and specific dataset combinations.</p><p>Mastering the art of joining tables is essential for working effectively with SQL-based databases. Joins play a critical role in SQL, as efficient data storage typically involves splitting data into multiple related tables. Understanding how to reassemble this data through joins is a key skill, which we will explore further in the upcoming lecture.</p><h2 id="sql-1" tabindex="-1">SQL <a class="header-anchor" href="#sql-1" aria-label="Permalink to &quot;SQL&quot;">​</a></h2><p>What is SQL? Structured Query Language (SQL) is a computer language that enables us to communicate and manipulate SQL databases(db) and it is one of the most widely used languages for db management.</p><p>There are many flavours (versions) of SQL. However, they all share the basic syntax as below and often only differ in the way the basic syntax is extended.</p><p>SQL is a Relational Database Management System (RDBMS), meaning that the data is stored in tables that are seperated based on the scope of the database. A nice illustration of how data is stored can be seen in the figure below.</p><img src="https://r4ds.hadley.nz/diagrams/relational.png" alt="drawing" width="500" style="margin-left:auto;margin-right:auto;"><p><em>Image borrowed from:<a href="https://r4ds.hadley.nz/" target="_blank" rel="noreferrer">https://r4ds.hadley.nz/</a></em></p><p>Here, the tables are seperated to reflect differring objects. We also see that the tables are linked or <em>related</em> to each other through specific variables (<em>keys</em>). This is where the name relational database comes from.</p><h3 id="basic-syntax" tabindex="-1">Basic Syntax <a class="header-anchor" href="#basic-syntax" aria-label="Permalink to &quot;Basic Syntax&quot;">​</a></h3><p>Writing an SQL <em>query</em>(a question or a requests) is analagous to speaking to the database. Once we get a grasp of the basic syntax we will be able to query the database and retrieve data.</p><p>The syntax will be familiar from the tools we have already learnt.</p><p>We use <code>SELECT</code> to determine the variables we want and <code>FROM</code> to specify the table we want it from. Following the image above, we can make the following query.</p><div class="language-SQL vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">SQL</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> carrier, dest, tailnum</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flights;</span></span></code></pre></div><p><strong>Make sure to end the query with <code>;</code></strong></p><p>We can use <code>SELELCT *</code> to get <em>all</em> variables in the table. The query above is the simplest query one can make in SQL.</p><p>We can add a layer of complexity by filtering the table. We can do this by using the <code>WHERE</code> command. Continuing the example, we can make the following query.</p><div class="language-SQL vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">SQL</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> carrier, dest, tailnum</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flights</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dest</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sweden&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>Furthermore, we can use the logical operators <code>AND</code>, <code>OR</code>, <code>NOT</code> to perform logical chaining of conditions. The basic syntax is the following.</p><div class="language-SQL vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">SQL</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> variable1, variable2, ... </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- * if you want all variables</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> condition1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AND/OR/NOT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> condition2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AND/OR/NOT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> condition3 ...;</span></span></code></pre></div><p>To aggregate multiple tables into a single table we can use <code>... JOIN</code>. The syntax is similar to the previous lecture. <code>ON</code> specifies the key(s) to join on. Continuing the example above the syntax is the following.</p><div class="language-SQL vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">SQL</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> carrier, dest, tailnum, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">airlines</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">names</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flights</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LEFT JOIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> airlines </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> flights</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">carrier</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> airlines</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">carrier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>Using the syntax described above, we can chain multiple operations to generate the desired table. You can see more operations on <a href="https://www.w3schools.com/sql/default.asp" target="_blank" rel="noreferrer">W3</a>.</p><p>Since the SQL syntax has been adopted by both <code>pandas</code> and <code>tidyverse</code>, the content above will not be completely new to learn.</p><h3 id="storing-data" tabindex="-1">Storing Data <a class="header-anchor" href="#storing-data" aria-label="Permalink to &quot;Storing Data&quot;">​</a></h3><p>To start storing data, we need to create a table to store it in. We can do this using the <code>CREATE</code> command. The query is as follows.</p><div class="language-SQL vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">SQL</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> table_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>To our table, we need to add columns (variable), we can do this by specifying the name of the column and datatype. We can also specify constraints on the variable. The query is as follows.</p><div class="language-SQL vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">SQL</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> table_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Variable1 datatype </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Variable2 datatype </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>Common constraints are <code>NOT NULL</code>, <code>UNIQUE</code>, <code>PRIMARY KEY</code>, <code>FOREIGN KEY</code>. There are more constraints that can be added. They can be found on W3.</p><p>The <em>unique</em> identifier (id) of a row should be constrained with <code>UNIQUE</code> and it must also be filled (<code>NOT NULL</code>). The <code>PRIMARY KEY</code> incorporates both constraints. Therefore, it is good practice to specify the row id using the <code>PRIMARY KEY</code> constraint.</p><p>An example of creating a table can look something like the following query.</p><div class="language-SQL vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">SQL</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Persons</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- It does not need to be specified</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  id_number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VARCHAR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PRIMARY KEY</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>Specific datatypes can be looked up on <a href="https://www.w3schools.com/sql/default.asp" target="_blank" rel="noreferrer">W3</a>.</p><p>To change a table that already exists we can use the <code>ALTER</code> command. Specific ways to alter tables can be found on <a href="https://www.w3schools.com/sql/sql_alter.asp" target="_blank" rel="noreferrer">W3</a>.</p><p>Putting it all together, the SQL query looks as follows.</p><div class="language-SQL vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">SQL</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Persons</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  Name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- It does not need to be specified</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ID_number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PRIMARY KEY</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Computers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Computer_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Brand </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  Owner</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FOREIGN KEY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> REFERENCES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Persons(ID_number) </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Here, we create two tables and use <code>FOREIGN KEY</code> to link the owner of the computer to a specific person using the id-number. If we later realise that we want a person to have a variable specifying occupation, we can use the following command.</p><div class="language-SQL vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">SQL</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ALTER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Persons</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ADD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Occupation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>With a table created, we can add entries to the table. This can be done using the <code>INSERT</code> command. The full syntax looks as follows.</p><div class="language-SQL vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">SQL</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INSERT INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> table_name (variable1, variable2, ...)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (value1, value2, ...)</span></span></code></pre></div><p>Note that the order of the values should follow the order of the variables. Furthermore, if the constraints are violated we will get an error.</p><p>In the example above the query may look like</p><div class="language-SQL vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">SQL</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INSERT INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Persons (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ID_number)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Taariq&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;19000101-xxxx&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>Since, the Age variable does not need to be filled in, the query will populate the <code>Persons</code> table and have an empty cell for the Age column.</p><p>We are only scratching the surface of SQL, there is a lot more to learn. However, with this basic knowledge we will be able to interact with databases. You can find more information in the listed resources (W3).</p><p><strong>There are various libraries in Python and R to interact with SQL databases. We will primarily be working with SQLite databases since they are more accessible. Popular libraries are <a href="https://docs.python.org/3/library/sqlite3.html#tutorial" target="_blank" rel="noreferrer">sqlite3</a> for Python and <a href="https://dbplyr.tidyverse.org/articles/dbplyr.html" target="_blank" rel="noreferrer">dbplyr</a> for R.</strong></p><h2 id="regex-1" tabindex="-1">RegEx <a class="header-anchor" href="#regex-1" aria-label="Permalink to &quot;RegEx&quot;">​</a></h2><p>Regular Expressions (RegEx) is a powerful tool used in computer science and programming for pattern matching within strings. It provides a concise and flexible means of searching, matching, and manipulating text based on patterns.</p><p>A regular expression is a sequence of characters (a type of query) that defines a search pattern. These patterns can include a variety of elements such as literal characters, metacharacters (special characters with specific meanings), and quantifiers (to specify the number of occurrences). Regex is commonly used in tasks like text searching, validation, and text manipulation.</p><p>Before diving in to the syntax of RegEx, let&#39;s look at a simple example.</p><p>Consider a scenario where you want to extract email addresses from a text, for instance the following text.</p><blockquote><p>Please contact <a href="mailto:support@example.com" target="_blank" rel="noreferrer">support@example.com</a> for assistance. For general inquiries, you can email <a href="mailto:info@company.com" target="_blank" rel="noreferrer">info@company.com</a>.</p></blockquote><p>We can use the following RegEx to extract the emails in this text by matching them to a specific format.</p><div class="language-regex vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">regex</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\b[\\w._%+-]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[\\w.-]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\.[A-Za-z]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{2,4}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\b</span></span></code></pre></div><p>The expression above might look daunting but it will make sense when you get thet gist of RegEx. Lets break down this expression.</p><ul><li><code>\\b</code>: Word boundary to ensure that the match is a whole word and not part of a larger sequence. For instance, <code>\\bcat\\b</code> will match the word <em>cat</em> but not <em>scattered</em>.</li><li><code>[\\w._%+-]+</code>: Matches the username part of the email address, allowing alphanumeric characters, dots, underscores, percent signs, plus signs, and hyphens. Here <code>\\w</code> is a <strong>metacharacter</strong> which is short for <code>A-Za-z0-9</code>. <code>+</code><strong>outside</strong> of the brackets matches 1 or more of the proceeding character.</li><li><code>@</code>: Matches the <strong>@</strong> symbol.</li><li><code>[\\w.-]+</code>: Matches the domain name, allowing alphanumeric characters, dots, and hyphens.</li><li><code>\\.</code>: Matches the dot before the top-level domain.</li><li><code>[A-Z|a-z]{2,4}</code>: Matches the top-level domain (eg. .com) with at least two and at most 4 characters .</li><li><code>\\b</code>: Word boundary to complete the match.</li></ul><p>To summarise The following image illustrates what we have done.</p><p><img src="https://kottke.org/plus/misc/images/regex-example.png" alt="regex-email"></p><p><em>Image from: <a href="https://kottke.org/21/07/a-history-of-regular-expressions-and-artificial-intelligence" target="_blank" rel="noreferrer">https://kottke.org/21/07/a-history-of-regular-expressions-and-artificial-intelligence</a></em></p><p>Even if it does not make sense yet that is fine. You will get the hang of it when you start using it.</p><h3 id="basic-syntax-1" tabindex="-1">Basic Syntax <a class="header-anchor" href="#basic-syntax-1" aria-label="Permalink to &quot;Basic Syntax&quot;">​</a></h3><p>Some important definitions in regex are the following.</p><h4 id="literals" tabindex="-1">Literals <a class="header-anchor" href="#literals" aria-label="Permalink to &quot;Literals&quot;">​</a></h4><p>Characters in a regex pattern that match themselves. For example, the regex <code>abc</code> will match the string &quot;abc&quot; in the input.</p><h4 id="metacharacters" tabindex="-1">Metacharacters <a class="header-anchor" href="#metacharacters" aria-label="Permalink to &quot;Metacharacters&quot;">​</a></h4><p>Special characters with a specific meaning in regex. Some common metacharacters include:</p><ul><li><code>.</code> (dot): Matches any single character except a newline.</li><li><code>^</code>: Anchors the regex at the start of the string.</li><li><code>$</code>: Anchors the regex at the end of the string.</li><li><code>*</code>: Matches 0 or more occurrences of the preceding character or group.</li><li><code>+</code>: Matches 1 or more occurrences of the preceding character or group.</li><li><code>?</code>: Matches 0 or 1 occurrence of the preceding character or group.</li><li><code>|</code>: Acts like a logical OR, allowing alternatives. For example, <code>a|b</code> matches either &quot;a&quot; or &quot;b&quot;.</li><li><code>()</code>: Groups characters together. For example, <code>(abc)+</code> matches one or more occurrences of &quot;abc&quot;.</li></ul><h4 id="character-classes" tabindex="-1">Character Classes <a class="header-anchor" href="#character-classes" aria-label="Permalink to &quot;Character Classes&quot;">​</a></h4><ul><li><code>[ ]</code>: Defines a character class. For example, <code>[aeiou]</code> matches any vowel.</li><li><code>[^ ]</code>: Negates a character class. For example, <code>[^0-9]</code> matches any non-digit character.</li></ul><h4 id="quantifiers" tabindex="-1">Quantifiers <a class="header-anchor" href="#quantifiers" aria-label="Permalink to &quot;Quantifiers&quot;">​</a></h4><p>Control the number of occurrences of a character or group.</p><ul><li><code>{n}</code>: Matches exactly n occurrences.</li><li><code>{n,}</code>: Matches n or more occurrences.</li><li><code>{n,m}</code>: Matches between n and m occurrences.</li></ul><h4 id="escape-sequences" tabindex="-1">Escape sequences <a class="header-anchor" href="#escape-sequences" aria-label="Permalink to &quot;Escape sequences&quot;">​</a></h4><p>Use a backslash <code>\\</code> to escape a metacharacter, allowing it to be treated as a literal character. For example, <code>\\.</code> matches a literal period.</p><h4 id="predefined-character-classes" tabindex="-1">Predefined character classes <a class="header-anchor" href="#predefined-character-classes" aria-label="Permalink to &quot;Predefined character classes&quot;">​</a></h4><ul><li><code>\\d</code>: Matches any digit (equivalent to <code>[0-9]</code>).</li><li><code>\\D</code>: Matches any non-digit.</li><li><code>\\w</code>: Matches any word character (alphanumeric + underscore).</li><li><code>\\W</code>: Matches any non-word character.</li><li><code>\\s</code>: Matches any whitespace character.</li><li><code>\\S</code>: Matches any non-whitespace character.</li></ul><h4 id="anchors" tabindex="-1">Anchors <a class="header-anchor" href="#anchors" aria-label="Permalink to &quot;Anchors&quot;">​</a></h4><p>Specify the position in the string where a match must occur.</p><ul><li><code>\\b</code>: Word boundary.</li><li><code>\\B</code>: Non-word boundary.</li><li><code>^</code>: Start of a line.</li><li><code>$</code>: End of a line.</li></ul><h4 id="modifiers" tabindex="-1">Modifiers <a class="header-anchor" href="#modifiers" aria-label="Permalink to &quot;Modifiers&quot;">​</a></h4><ul><li><code>i</code>: Case-insensitive matching.</li><li><code>g</code>: Global matching (find all matches, not just the first).</li></ul><h4 id="wildcard" tabindex="-1">Wildcard <a class="header-anchor" href="#wildcard" aria-label="Permalink to &quot;Wildcard&quot;">​</a></h4><p><code>.*</code> is a common pattern to match any character (except newline) zero or more times.</p><p>I strongly believe that you learn regex by examples. So let&#39;s look a typical example of regex.</p><h3 id="example-extracting-email-addresses-from-a-list" tabindex="-1">Example: Extracting Email Addresses from a List <a class="header-anchor" href="#example-extracting-email-addresses-from-a-list" aria-label="Permalink to &quot;Example: Extracting Email Addresses from a List&quot;">​</a></h3><p>Suppose you have a list of email addresses:</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>john.doe@example.com</span></span>
<span class="line"><span>jane.smith@gmail.com </span></span>
<span class="line"><span>alice.jones@example.com</span></span>
<span class="line"><span>bob.miller@yahoo.com</span></span></code></pre></div><p>Now, let&#39;s say you want to extract all the email addresses from the domain example.com. You can use the following regex:</p><div class="language-regex vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">regex</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\b[A-Za-z0-9._%+-]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">@example</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">com</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\b</span></span></code></pre></div><p>Explanation:</p><p>\\b: Word boundary to ensure that we match the entire domain, not just a part of it. [A-Za-z0-9._%+-]+: Matches the username part of the email address, allowing letters, numbers, dots, underscores, percent signs, plus signs, and hyphens. @example.com: Matches the domain part, specifically example.com.</p><p>This pattern will match the following strings.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[&#39;john.doe@example.com&#39;, &#39;alice.jones@example.com&#39;]</span></span></code></pre></div><p>This is a simple example of regex that is meant to illustrate the power of it.</p><h3 id="exercises" tabindex="-1">Exercises <a class="header-anchor" href="#exercises" aria-label="Permalink to &quot;Exercises&quot;">​</a></h3><p>Here are some excersises, try them out on your own!</p><h4 id="simple-email-validation" tabindex="-1">Simple Email Validation <a class="header-anchor" href="#simple-email-validation" aria-label="Permalink to &quot;Simple Email Validation&quot;">​</a></h4><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>john.doe@example.com</span></span>
<span class="line"><span>jane.smith@gmail.com</span></span>
<span class="line"><span>alice.jones123@yahoo.com</span></span>
<span class="line"><span>invalid.email@domain</span></span></code></pre></div><p>Output should be:</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Valid Email Addresses:</span></span>
<span class="line"><span>- john.doe@example.com</span></span>
<span class="line"><span>- jane.smith@gmail.com</span></span>
<span class="line"><span>- alice.jones123@yahoo.com</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Invalid Email Addresses:</span></span>
<span class="line"><span>- invalid.email@domain</span></span></code></pre></div><h3 id="extracting-phone-numbers" tabindex="-1">Extracting Phone Numbers <a class="header-anchor" href="#extracting-phone-numbers" aria-label="Permalink to &quot;Extracting Phone Numbers&quot;">​</a></h3><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Phone numbers: </span></span>
<span class="line"><span>123-456-7890,</span></span>
<span class="line"><span>(555) 987-6543, </span></span>
<span class="line"><span>9876543210, 555-1234</span></span>
<span class="line"><span>Invalid: </span></span>
<span class="line"><span>12-345-6789, </span></span>
<span class="line"><span>555-98765, </span></span>
<span class="line"><span>abcdefgh</span></span></code></pre></div><p>Ouput should be:</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Valid Phone Numbers:</span></span>
<span class="line"><span>- 123-456-7890</span></span>
<span class="line"><span>- (555) 987-6543</span></span>
<span class="line"><span>- 9876543210</span></span>
<span class="line"><span>- 555-1234</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Invalid Phone Numbers:</span></span>
<span class="line"><span>- 12-345-6789</span></span>
<span class="line"><span>- 555-98765</span></span>
<span class="line"><span>- abcdefgh</span></span></code></pre></div><h3 id="extracting-html-tags-and-attributes" tabindex="-1">Extracting HTML Tags and Attributes <a class="header-anchor" href="#extracting-html-tags-and-attributes" aria-label="Permalink to &quot;Extracting HTML Tags and Attributes&quot;">​</a></h3><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;p class=&quot;intro&quot;&gt;This is a &lt;strong&gt;sample&lt;/strong&gt; paragraph.&lt;/p&gt;</span></span>
<span class="line"><span>&lt;p&gt;No class here.&lt;/p&gt;</span></span>
<span class="line"><span>&lt;div id=&quot;container&quot; class=&quot;main&quot;&gt;</span></span>
<span class="line"><span>  &lt;h1&gt;Title&lt;/h1&gt;</span></span>
<span class="line"><span>  &lt;p&gt;Content&lt;/p&gt;</span></span>
<span class="line"><span>&lt;/div&gt;</span></span></code></pre></div><p>Output should be:</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>HTML Tags and Attributes:</span></span>
<span class="line"><span>- &lt;p class=&quot;intro&quot;&gt;</span></span>
<span class="line"><span>- &lt;strong&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Attributes in &lt;div&gt;:</span></span>
<span class="line"><span>- id=&quot;container&quot;</span></span>
<span class="line"><span>- class=&quot;main&quot;</span></span></code></pre></div><p>You can execute RegEx using Python or R. Look at the resources for how to do this!</p>`,129)]))}const g=e(n,[["render",l]]);export{k as __pageData,g as default};
