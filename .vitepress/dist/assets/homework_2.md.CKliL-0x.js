import{_ as o,c as t,a2 as s,o as r}from"./chunks/framework.DPuwY6B9.js";const u=JSON.parse('{"title":"Homework 2 — Tables & Plots (Basics)","description":"","frontmatter":{},"headers":[],"relativePath":"homework/2.md","filePath":"homework/2.md"}'),a={name:"homework/2.md"};function i(n,e,l,c,d,p){return r(),t("div",null,e[0]||(e[0]=[s(`<h1 id="homework-2-—-tables-plots-basics" tabindex="-1">Homework 2 — Tables &amp; Plots (Basics) <a class="header-anchor" href="#homework-2-—-tables-plots-basics" aria-label="Permalink to &quot;Homework 2 — Tables &amp; Plots (Basics)&quot;">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>In HW2 you’ll practice:</p><ul><li>Reading CSV files with varying <strong>separators/delimiters/decimal signs</strong></li><li>Basic <strong>table operations</strong> (select, derive columns, sort, group, summarise)</li><li>Producing a <strong>simple, readable plot</strong> that supports a conclusion</li><li>Writing a clear, reproducible <strong>report</strong> (Markdown or Notebook)</li></ul><p>You may use <strong>any tools</strong> (Python/R/SQL/editors). Your report must be <strong>readable on GitHub</strong> (<code>README.md</code> or <code>.ipynb</code>), and <strong>all code</strong> producing tables/figures must be committed so results are reproducible.</p><h2 id="repo-setup" tabindex="-1">Repo Setup <a class="header-anchor" href="#repo-setup" aria-label="Permalink to &quot;Repo Setup&quot;">​</a></h2><p>Use your per-homework repo <strong><code>username-homework-2</code></strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>HW2/</span></span>
<span class="line"><span>  README.md            # or HW2.ipynb</span></span>
<span class="line"><span>  src/                 # scripts or functions you call from the report</span></span>
<span class="line"><span>  data/                # small data or instructions to fetch large data</span></span>
<span class="line"><span>  requirements.txt     # or environment.yml / renv.lock (optional but helpful)</span></span>
<span class="line"><span>.gitignore             # ignore caches, OS files, large raw data, notebooks’ checkpoints</span></span></code></pre></div><p>Create a top-level <strong><code>.gitignore</code></strong> and exclude unnecessary files (e.g., <code>*.DS_Store</code>, <code>.ipynb_checkpoints/</code>, large raw files, virtual envs).</p><h2 id="data" tabindex="-1">Data <a class="header-anchor" href="#data" aria-label="Permalink to &quot;Data&quot;">​</a></h2><p>All datasets are in the course data repo: <strong><a href="https://github.com/su-mt4007/data" target="_blank" rel="noreferrer">https://github.com/su-mt4007/data</a></strong></p><ul><li><code>Booli_sold.csv</code> — apartment sales in <strong>Ekhagen</strong></li><li><code>2018_R_per_kommun.csv</code> — <strong>Swedish 2018 election</strong> results by municipality</li><li><code>stroke-data.csv</code> — <strong>stroke</strong> outcomes with individual attributes (source: Kaggle)</li></ul><blockquote><p>Tip: CSVs may use different <strong>separators</strong> (<code>,</code> <code>;</code> <code>\\t</code>) and <strong>decimal signs</strong> (<code>.</code> <code>,</code>). In pandas, for example: <code>pd.read_csv(path, sep=&#39;;&#39;, decimal=&#39;,&#39;)</code>. In R: <code>read.csv(..., sep=&#39;;&#39;, dec=&#39;,&#39;)</code>.</p></blockquote><h2 id="tasks" tabindex="-1">Tasks <a class="header-anchor" href="#tasks" aria-label="Permalink to &quot;Tasks&quot;">​</a></h2><h3 id="a-apartment-prices-ekhagen" tabindex="-1">A) Apartment Prices (Ekhagen) <a class="header-anchor" href="#a-apartment-prices-ekhagen" aria-label="Permalink to &quot;A) Apartment Prices (Ekhagen)&quot;">​</a></h3><p>Using <code>Booli_sold.csv</code>:</p><ol><li><strong>Price per sqm (ppsqm):</strong> Add a derived column <code>ppsqm = price / living_area</code> (use the dataset’s column names as appropriate; handle missing/zero areas).</li><li><strong>Top 5 by ppsqm:</strong> Show a table of the <strong>five</strong> most expensive apartments by <code>ppsqm</code> (columns: id/address, size, price, <code>ppsqm</code>).</li><li><strong>Average ppsqm:</strong> Compute and report the <strong>mean</strong> <code>ppsqm</code> (state how you handled missing values/outliers).</li><li><strong>One insight:</strong> Briefly highlight <strong>one</strong> interesting aspect/pattern (2–4 sentences) and show a small supporting table or plot.</li></ol><h3 id="b-swedish-election-2018" tabindex="-1">B) Swedish Election 2018 <a class="header-anchor" href="#b-swedish-election-2018" aria-label="Permalink to &quot;B) Swedish Election 2018&quot;">​</a></h3><p>Using <code>2018_R_per_kommun.csv</code>:</p><ol><li><strong>Legitimate votes in Stockholm:</strong> Compute the <strong>total number of legitimate votes</strong> (<em>Giltiga Röster</em>) across all <strong>Stockholm</strong> municipalities (explain how you filtered Stockholm).</li><li><strong>Highest S%:</strong> Identify the <strong>municipality</strong> with the highest vote <strong>percentage for Socialdemokraterna (S)</strong>. Report municipality name and percentage.</li><li><strong>Participation ranking:</strong> Produce a table of the <strong>top 3 municipalities by participation (Valdeltagande)</strong> with municipality name and participation rate.</li></ol><blockquote><p>Be explicit about how you parsed the file (separator/decimal), and include any renaming you did so your code is easy to follow.</p></blockquote><h3 id="c-predicting-strokes-one-simple-plot" tabindex="-1">C) Predicting Strokes (one simple plot) <a class="header-anchor" href="#c-predicting-strokes-one-simple-plot" aria-label="Permalink to &quot;C) Predicting Strokes (one simple plot)&quot;">​</a></h3><p>Using <code>stroke-data.csv</code>:</p><ul><li>Create <strong>one</strong> simple, well-labeled plot that supports a <strong>single, clear conclusion</strong> (e.g., relationship between a binary/categorical feature and stroke outcome, or a summary of rates across groups).</li><li>State your <strong>conclusion in one or two sentences</strong>, referring to the plot (avoid causal claims; stick to descriptive insight).</li></ul><h2 id="report-requirements-markdown-or-notebook" tabindex="-1">Report Requirements (Markdown or Notebook) <a class="header-anchor" href="#report-requirements-markdown-or-notebook" aria-label="Permalink to &quot;Report Requirements (Markdown or Notebook)&quot;">​</a></h2><p>Your report should be concise and easy to follow on GitHub:</p><ul><li><strong>Title &amp; brief intro</strong> (what you did, data files used)</li><li><strong>Methods/steps</strong> with short prose and code cells/blocks</li><li><strong>Tables/figures</strong> placed near the text that discusses them</li><li><strong>Reproducibility notes</strong>: how to run (e.g., <code>pip install -r requirements.txt</code> then open the notebook)</li><li><strong>Conclusion</strong> (1–3 bullets or sentences)</li></ul><p>Keep large data out of Git; provide <strong>download instructions</strong> if needed.</p><h2 id="acceptance-criteria-what-we-look-for" tabindex="-1">Acceptance Criteria (what we look for) <a class="header-anchor" href="#acceptance-criteria-what-we-look-for" aria-label="Permalink to &quot;Acceptance Criteria (what we look for)&quot;">​</a></h2><ul><li><strong>Reads the data correctly</strong> (handles separator/decimal, shows code)</li><li><strong>Derives <code>ppsqm</code></strong>, shows <strong>Top-5 table</strong>, computes <strong>average ppsqm</strong>, and states <strong>one insight</strong></li><li><strong>Election tasks completed</strong> (Stockholm total legitimate votes; municipality with highest S%; top-3 participation table)</li><li><strong>One stroke plot</strong> + <strong>one-sentence conclusion</strong></li><li><strong>Reproducibility</strong>: code and minimal environment notes included</li><li><strong>Clarity</strong>: report is readable on GitHub with headings/markdown</li></ul><h2 id="submission" tabindex="-1">Submission <a class="header-anchor" href="#submission" aria-label="Permalink to &quot;Submission&quot;">​</a></h2><ol><li><p>Push your work to GitHub.</p></li><li><p>Open an Issue titled <strong><code>HW2 – Submission</code></strong> (optional label: <code>ready-for-grading</code>). In the Issue body, include:</p><ul><li>Link to your report file (<code>HW2/README.md</code> or <code>HW2/HW2.ipynb</code>)</li><li>2–3 lines summarising your results</li><li>Any notes for the grader (e.g., parsing choices)</li></ul></li></ol><p><strong>Deadline:</strong> Tuesday 23:59 (Europe/Stockholm)</p><h2 id="peer-review-after-the-deadline" tabindex="-1">Peer Review (after the deadline) <a class="header-anchor" href="#peer-review-after-the-deadline" aria-label="Permalink to &quot;Peer Review (after the deadline)&quot;">​</a></h2><p>Comment under <strong>your partner’s</strong> <code>HW2 – Submission</code> Issue. Copy this checklist:</p><ul><li><strong>Coverage:</strong> Are all HW2 tasks completed?</li><li><strong>Parsing:</strong> Is the separator/decimal handling explicit and correct?</li><li><strong>Results:</strong> Do Top-5, averages, and rankings look consistent with the code?</li><li><strong>Clarity:</strong> Is the report organised and readable on GitHub?</li><li><strong>Reproducibility:</strong> Can you reproduce (or see how to reproduce) the outputs?</li><li><strong>One suggestion:</strong> A specific, actionable improvement.</li></ul><p><strong>Peer-review deadline:</strong> Thursday 23:59 (Europe/Stockholm)</p><h2 id="grading" tabindex="-1">Grading <a class="header-anchor" href="#grading" aria-label="Permalink to &quot;Grading&quot;">​</a></h2><p>Per-homework scale <strong>U / G / VG</strong> based on:</p><ul><li><strong>Completeness</strong> (all tasks + submission/peer review)</li><li><strong>Clarity</strong> (well-structured, labelled tables/plots, brief explanations)</li><li><strong>Correctness &amp; Reproducibility</strong> (parsing handled; code produces shown outputs)</li></ul><p><strong>Notes</strong></p><ul><li>Late submissions or reviews require an <strong>extra task</strong> and are graded <strong>Pass/Fail</strong> only (no VG).</li></ul>`,42)]))}const h=o(a,[["render",i]]);export{u as __pageData,h as default};
